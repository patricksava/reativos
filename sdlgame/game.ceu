#include "sdl.ceu"

#define SHOOT_COST 5
#define HIT_BONUS 10
#define HIT_BONUS_SP 25

input void SDL_REDRAW;
input void SDL_QUIT;
input int  SDL_DT;
input _SDL_KeyboardEvent&& SDL_KEYDOWN;
input _SDL_KeyboardEvent&& SDL_KEYUP;
input _SDL_MouseButtonEvent&& SDL_MOUSEBUTTONDOWN;

var _SDL_Window&? window;
    finalize
        window = &_SDL_CreateWindow("Rect Shooting",
                    _SDL_WINDOWPOS_UNDEFINED,
                    _SDL_WINDOWPOS_UNDEFINED,
                    640, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(&&window!);
    end

var _SDL_Renderer&? renderer;
    finalize
        renderer = &_SDL_CreateRenderer(&&window!, -1, 0);
    with
        _SDL_DestroyRenderer(&&renderer!);
    end

class Cloud with
    var _SDL_Renderer& ren;
    var _SDL_Rect      r;
    var int            vx;
    var int 	       hit_bonus;
    event void go_collide;
do
    var int x = -this.r.w * 1000;
    par/or do
	var bool hit_cloud =
	    par do
	        loop do
	            var int dt = await SDL_DT;
	            x = x + this.vx*dt;
		    if x > 640000 then
		        escape false;
		    end
	        end
	    with
		await this.go_collide;
		escape true;
	    end;
	if hit_cloud then
	    this.vx = 0;
	end
    with
        every SDL_REDRAW do
            if this.hit_bonus == HIT_BONUS then
		_SDL_SetRenderDrawColor(&&this.ren, 0xFF,0x00,0x00,0x00);
	    else
		_SDL_SetRenderDrawColor(&&this.ren, 0xFF,0xFF,0x00,0x00);
	    end;
            this.r.x = x / 1000;
            _SDL_RenderFillRect(&&this.ren, &&this.r);
        end
    end
end

class Projectile with
    var _SDL_Renderer& ren;
    var _SDL_Rect r;
    var int vy;
    event void go_collide;
do
    var int y = 430 * 1000;
    par/or do
	var bool hit_cloud =
	    par do
	        loop do
	            var int dt = await SDL_DT;
	            y = y + vy*dt;  
	            if y < 0 then
			escape false;
		    end
	        end
	    with
		await this.go_collide;
		escape true;
	    end;
	if hit_cloud then
	    this.vy = 0;
	end
    with
	every SDL_REDRAW do
	    _SDL_SetRenderDrawColor(&&this.ren,
		                    0x00,0xFF,0x00,0x00);
	    this.r.y = y / 1000;
	    _SDL_RenderFillRect(&&this.ren, &&r);
	end
    end
end

class Score with
    var _SDL_Renderer& ren;
    var _SDL_Rect r = _SDL_Rect(0,0,0,10);
    var int points = 50;
do
    every SDL_REDRAW do
	_SDL_SetRenderDrawColor(&&this.ren,
		            0x00,0x00,0xFF,0x00);
	if this.points > 100 then
	    this.points = 100;
	end;
	if this.points < 0 then
	    this.points = 0;
	end;
	this.r.w = 680 * (this.points/100.0);
	_SDL_RenderFillRect(&&this.ren, &&r);
    end
end
    

class Player with
    var _SDL_Renderer& ren;
    var _SDL_Rect r = _SDL_Rect(0,0,20,50);
do
    var int x = (640/2 - 20/2) * 1000;
    var int y = (480-50) * 1000;
    var int vx = 0;
    var int vy = 0;

    par do
        every dt in SDL_DT do
            x = x + vx*dt;
            y = y + vy*dt;
        end
    with
        par do
            loop do
                var _SDL_KeyboardEvent&& key;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_LEFT;
                vx = -100;
                key = await SDL_KEYUP   until key:keysym.sym==_SDLK_LEFT;
                vx = 0;
            end
        with
            loop do
                var _SDL_KeyboardEvent&& key;
                key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_RIGHT;
                vx = 100;
                key = await SDL_KEYUP   until key:keysym.sym==_SDLK_RIGHT;
                vx = 0;
            end
        end
    with
        every SDL_REDRAW do
            _SDL_SetRenderDrawColor(&&this.ren,
                                    0x00,0x00,0x00,0x00);
            r.x = x / 1000;
            r.y = y / 1000;
            _SDL_RenderFillRect(&&this.ren, &&r);
        end
    end
end

_srand(_time(null));

par/or do
    await SDL_QUIT;
with
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(&&renderer!,
                                0xFF,0xFF,0xFF,0x00);
        _SDL_RenderFillRect(&&renderer!, null);
    end
with
    pool Cloud[] clouds;
    pool Projectile[] projectiles;

    var Player p with
        this.ren = &renderer!;
    end;
    var Score score with
	this.ren = &renderer!;
    end;
    par do
        every 3s do
	    spawn Cloud in clouds with
		var int w = 50 + _rand()%50;
		var int h = 20 + _rand()%50;
		var int y = h + _rand()%200;
		
		if _rand()%10 == 0 then
		    this.hit_bonus = HIT_BONUS_SP;
		else
		    this.hit_bonus = HIT_BONUS;
		end;
		this.ren = &renderer!;
		this.r   = _SDL_Rect(0,y,w,h);
		this.vx  = 10 + _rand()%100;
	    end;
	end
    with
   	loop do
            var _SDL_KeyboardEvent&& key;
            key = await SDL_KEYDOWN until key:keysym.sym==_SDLK_RETURN;
	    if score.points >= SHOOT_COST then
                spawn Projectile in projectiles with 
		    var int x = p.r.x + p.r.w/2 - 2.5;
		    this.ren = &renderer!;
		    this.r   = _SDL_Rect(x,0,5,5);
		    this.vy  = -150;
	        end;
		score.points = score.points - SHOOT_COST;
	    end
            key = await SDL_KEYUP   until key:keysym.sym==_SDLK_RETURN;
        end
    with
	every SDL_DT do
	    var Cloud&&?[] clds;
	    var Projectile&&?[] prjs;
	    loop c in clouds do
		loop p in projectiles do
		    if _SDL_HasIntersection(&&c:r, &&p:r) then
			clds = []..clds..[c];
			prjs = []..prjs..[p];
			score.points = score.points + c:hit_bonus;
		    end
		end
	    end
	    loop i in $clds do
		if clds[i]? then
		    emit clds[i]!:go_collide;
		end
	    end
	    loop i in $prjs do
		if prjs[i]? then
		    emit prjs[i]!:go_collide;
		end
	    end
	end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(&&renderer!);
    end
end

escape 0;
